use super::tok::{self, Tok};
use super::ast::*;

#[recursive_ascent]
grammar<'input>(text: &'input str);

CommaList<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Qualified<T>: QualifiedName =
    <db_name:(<DatabaseName> ".")?> <name:T> => QualifiedName { db_name: db_name, name: name };

pub Sql: Sql = {
    <stmt_list: Stmt*> => {
        Sql{<>}
    },
};

Stmt: Stmt = {
    <SystemStmt> ";" => Stmt::System(<>),
    <DatabaseStmt> ";" => Stmt::Database(<>),
   // TableStmt ";" => Stmt::Table(<>),
   // IndexStmt ";" => Stmt::Index(<>),
   //  AlterStmt ";" => Stmt::Alter(<>),
};

SystemStmt: SystemStmt = {
    "show" "databases" => SystemStmt::ShowDatabases,
};

DatabaseStmt: DatabaseStmt = {
    CreateDatabase,
    DropDatabase,
    UseDatabase,
    ShowTables,
};


DatabaseName = Name;
CreateDatabase: DatabaseStmt = {
    "create" "database" <db_name: DatabaseName> => DatabaseStmt::CreateDatabase { <> },
};

DropDatabase: DatabaseStmt = {
    "drop" "database" <db_name:DatabaseName> => DatabaseStmt::DropDatabase { <> },
};

UseDatabase: DatabaseStmt = {
    "use" "database" <db_name:DatabaseName> => DatabaseStmt::UseDatabase { <> },
};

ShowTables: DatabaseStmt = {
    "show" "tables" => DatabaseStmt::ShowTables,
};

Id: Name = {
    "Id" => <>.to_owned(),
    "indexed" => "indexed".to_owned(),
    // TODO fallback
    "abort" => "abort".to_owned(),
    "action" => "action".to_owned(),
    "after" => "after".to_owned(),
    "analyze" => "analyze".to_owned(),
    "asc" => "asc".to_owned(),
    "attach" => "attach".to_owned(),
    "before" => "before".to_owned(),
    "begin" => "begin".to_owned(),
    "by" => "by".to_owned(),
    "cascade" => "cascade".to_owned(),
//    "cast" => "cast".to_owned(),
//    "column" => "column".to_owned(),
    "conflict" => "conflict".to_owned(),
//    "database" => "database".to_owned(),
    "deferred" => "deferred".to_owned(),
    "desc" => "desc".to_owned(),
    "detach" => "detach".to_owned(),
    "each" => "each".to_owned(),
    "end" => "end".to_owned(),
    "exclusive" => "exclusive".to_owned(),
    "explain" => "explain".to_owned(),
    "fail" => "fail".to_owned(),
    "for" => "for".to_owned(),
    "ignore" => "ignore".to_owned(),
    "immediate" => "immediate".to_owned(),
    "initially" => "initially".to_owned(),
    "instead" => "instead".to_owned(),
//    "like" => "like".to_owned(),
//    "match" => "match".to_owned(),
    "no" => "no".to_owned(),
    "plan" => "plan".to_owned(),
    "query" => "query".to_owned(),
    "key" => "key".to_owned(),
    "of" => "of".to_owned(),
    "offset" => "offset".to_owned(),
    "pragma" => "pragma".to_owned(),
//    "raise" => "raise".to_owned(),
    "recursive" => "recursive".to_owned(),
    "release" => "release".to_owned(),
    "replace" => "replace".to_owned(),
    "restrict" => "restrict".to_owned(),
    "row" => "row".to_owned(),
    "rollback" => "rollback".to_owned(),
    "savepoint" => "savepoint".to_owned(),
    "temp" => "temp".to_owned(),
    "trigger" => "trigger".to_owned(),
    "vacuum" => "vacuum".to_owned(),
    "view" => "view".to_owned(),
    "virtual" => "virtual".to_owned(),
//    "with" => "with".to_owned(),
    "without" => "without".to_owned(),
//    "except" => "except".to_owned(),
//    "intersect" => "intersect".to_owned(),
//    "union" => "union".to_owned(),
    "reindex" => "reindex".to_owned(),
    "rename" => "rename".to_owned(),
    "if" => "if".to_owned(),
};

IdString: Name = {
    Id,
    // TODO "StringLiteral",
};

Name: Name = {
    Id,
    "StringLiteral" => <>.to_owned(),
    "cross" => "cross".to_owned(),
    "inner" => "inner".to_owned(),
    "left" => "left".to_owned(),
    "natural" => "natural".to_owned(),
    "outer" => "outer".to_owned(),
    "right" => "right".to_owned(),
};


extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "abort" => Tok::Abort,
        "action" => Tok::Action,
        "add" => Tok::Add,
        "after" => Tok::After,
        "all" => Tok::All,
        "alter" => Tok::Alter,
        "analyze" => Tok::Analyze,
        "and" => Tok::And,
        "as" => Tok::As,
        "asc" => Tok::Asc,
        "attach" => Tok::Attach,
        "autoincrement" => Tok::Autoincr,
        "before" => Tok::Before,
        "begin" => Tok::Begin,
        "between" => Tok::Between,
        "by" => Tok::By,
        "cascade" => Tok::Cascade,
        "case" => Tok::Case,
        "cast" => Tok::Cast,
        "check" => Tok::Check,
        "collate" => Tok::Collate,
        "column" => Tok::ColumnKw,
        "commit" => Tok::Commit,
        "conflict" => Tok::Conflict,
        "constraint" => Tok::Constraint,
        "create" => Tok::Create,
        "cross" => Tok::Cross,
        "current_date" => Tok::CurrentDate,
        "current_time" => Tok::CurrentTime,
        "current_timestamp" => Tok::CurrentTimestamp,
        "database" => Tok::Database,
        "databases" => Tok::Databases,
        "default" => Tok::Default,
        "deferrable" => Tok::Deferrable,
        "deferred" => Tok::Deferred,
        "delete" => Tok::Delete,
        "desc" => Tok::Desc,
        "detach" => Tok::Detach,
        "distinct" => Tok::Distinct,
        "drop" => Tok::Drop,
        "each" => Tok::Each,
        "else" => Tok::Else,
        "end" => Tok::End,
        "escape" => Tok::Escape,
        "except" => Tok::Except,
        "exclusive" => Tok::Exclusive,
        "exists" => Tok::Exists,
        "explain" => Tok::Explain,
        "fail" => Tok::Fail,
        "for" => Tok::For,
        "foreign" => Tok::Foreign,
        "from" => Tok::From,
        "full" => Tok::Full,
        "glob" => Tok::Glob,
        "group" => Tok::Group,
        "having" => Tok::Having,
        "if" => Tok::If,
        "ignore" => Tok::Ignore,
        "immediate" => Tok::Immediate,
        "in" => Tok::In,
        "index" => Tok::Index,
        "indexed" => Tok::Indexed,
        "initially" => Tok::Initially,
        "inner" => Tok::Inner,
        "insert" => Tok::Insert,
        "instead" => Tok::Instead,
        "intersect" => Tok::Intersect,
        "into" => Tok::Into,
        "is" => Tok::Is,
        "isnull" => Tok::IsNull,
        "join" => Tok::Join,
        "key" => Tok::Key,
        "left" => Tok::Left,
        "like" => Tok::Like,
        "limit" => Tok::Limit,
        "match" => Tok::Match,
        "natural" => Tok::Natural,
        "no" => Tok::No,
        "not" => Tok::Not,
        "notnull" => Tok::NotNull,
        "null" => Tok::Null,
        "of" => Tok::Of,
        "offset" => Tok::Offset,
        "on" => Tok::On,
        "or" => Tok::Or,
        "order" => Tok::Order,
        "outer" => Tok::Outer,
        "plan" => Tok::Plan,
        "pragma" => Tok::Pragma,
        "primary" => Tok::Primary,
        "query" => Tok::Query,
        "raise" => Tok::Raise,
        "recursive" => Tok::Recursive,
        "references" => Tok::References,
        "regexp" => Tok::Regexp,
        "reindex" => Tok::Reindex,
        "release" => Tok::Release,
        "rename" => Tok::Rename,
        "replace" => Tok::Replace,
        "restrict" => Tok::Restrict,
        "right" => Tok::Right,
        "rollback" => Tok::Rollback,
        "row" => Tok::Row,
        "savepoint" => Tok::Savepoint,
        "select" => Tok::Select,
        "set" => Tok::Set,
        "show" => Tok::Show,
        "table" => Tok::Table,
        "tables" => Tok::Tables,
        "temp" => Tok::Temp,
        "then" => Tok::Then,
        "to" => Tok::To,
        "transaction" => Tok::Transaction,
        "trigger" => Tok::Trigger,
        "union" => Tok::Union,
        "unique" => Tok::Unique,
        "update" => Tok::Update,
        "use" => Tok::Use,
        "using" => Tok::Using,
        "vacuum" => Tok::Vacuum,
        "values" => Tok::Values,
        "view" => Tok::View,
        "virtual" => Tok::Virtual,
        "when" => Tok::When,
        "where" => Tok::Where,
        "with" => Tok::With,
        "without" => Tok::Without,

        "StringLiteral" => Tok::StringLiteral(<&'input str>),
        "Id" => Tok::Id(<&'input str>),
        "Variable" => Tok::Variable(<&'input str>),

        "Blob" => Tok::Blob(<&'input str>),
        "Integer" => Tok::Integer(<&'input str>),
        "Float" => Tok::Float(<&'input str>),

        "&" => Tok::BitAnd,
        "~" => Tok::BitNot,
        "|" => Tok::BitOr,
        "," => Tok::Comma,
        "||" => Tok::Concat,
        "." => Tok::Dot,
        "=" => Tok::Equals,
        ">" => Tok::GreaterThan,
        "=>" => Tok::GreaterEquals,
        "(" => Tok::LeftParen,
        "<<" => Tok::LeftShift,
        "<=" => Tok::LessEquals,
        "<" => Tok::LessThan,
        "-" => Tok::Minus,
        "<>" => Tok::NotEquals,
        "+" => Tok::Plus,
        "%" => Tok::Reminder,
        ")" => Tok::RightParen,
        ">>" => Tok::RightShift,
        ";" => Tok::Semi,
        "/" => Tok::Slash,
        "*" => Tok::Star,
    }
}

